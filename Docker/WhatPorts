#!/bin/bash

# Load shared colors
source "$(dirname "$0")/colors.sh"

show_usage() {
    echo -e "${BLUE}Usage:${NC} $(basename $0) [container_name] [options]"
    echo -e "${BLUE}Options:${NC}"
    echo "  -a, --all     Show all containers (including stopped)"
    echo "  -h, --help    Show this help"
}

show_container_ports() {
    local container="$1"
    
    echo -e "${GREEN}Container:${NC} $container"
    echo -e "${YELLOW}HOST PORT${NC}       ${YELLOW}CONTAINER PORT${NC}    ${YELLOW}PROTOCOL${NC}"
    echo "─────────────────────────────────────────────────────────"
    
    # Get port mappings
    docker inspect "$container" --format='
{{- range $port, $conf := .NetworkSettings.Ports}}
{{- if $conf}}
{{- range $conf}}{{.HostPort}} {{$port}}{{end}}
{{- else}}
- {{$port}}
{{- end}}
{{- end}}' | while read host_port container_port; do
        if [[ -n "$container_port" && "$container_port" != "" ]]; then
            # Split port and protocol
            port_proto=(${container_port//\// })
            port="${port_proto[0]}"
            proto="${port_proto[1]:-tcp}"
            
            if [[ "$host_port" == "-" ]]; then
                printf "%-15s %-18s %s\n" "Not mapped" "$port" "$proto"
            else
                printf "%-15s %-18s %s\n" "$host_port" "$port" "$proto"
            fi
        fi
    done
}

list_all_containers() {
    local show_all="$1"
    local ps_cmd="docker ps --format '{{.Names}}'"
    
    if [[ "$show_all" == "true" ]]; then
        ps_cmd="docker ps -a --format '{{.Names}}'"
        echo -e "${BLUE}All containers (including stopped):${NC}"
    else
        echo -e "${BLUE}Running containers:${NC}"
    fi
    
    echo -e "${YELLOW}CONTAINER${NC}                  ${YELLOW}PORTS${NC}"
    echo "──────────────────────────────────────────────────────────"
    
    eval "$ps_cmd" | while read c; do
        if [[ -n "$c" ]]; then
            ports=$(docker port "$c" 2>/dev/null | tr '\n' ' ' || echo "None")
            printf "%-30s %s\n" "$c" "${ports:-None}"
        fi
    done
}

# Parse arguments
SHOW_ALL=false
CONTAINER=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -a|--all)
            SHOW_ALL=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        -*)
            echo -e "${RED}Error:${NC} Unknown option $1"
            show_usage
            exit 1
            ;;
        *)
            CONTAINER="$1"
            shift
            ;;
    esac
done

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
    echo -e "${RED}Error:${NC} Docker is not running"
    exit 1
fi

if [[ -n "$CONTAINER" ]]; then
    # Check if container exists
    if ! docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER}$"; then
        echo -e "${RED}Error:${NC} Container '$CONTAINER' not found"
        exit 1
    fi
    
    show_container_ports "$CONTAINER"
else
    list_all_containers "$SHOW_ALL"
fi